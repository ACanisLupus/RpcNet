//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by RpcNetGen 1.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test
{
    using System;
    using System.Net;
    using RpcNet;

    internal static class TestServiceConstants
    {
        public const int TestServiceVersion = 1;
        public const int TestMyStruct_1 = 1;
        public const int TestServiceProgram = 0x02004009;
    }

    internal partial class MyStruct : IXdrReadable, IXdrWritable
    {
        public bool BoolValue { get; set; }
        public byte Int8Value { get; set; }
        public short Int16Value { get; set; }
        public int Int32Value { get; set; }
        public long Int64Value { get; set; }
        public ushort UInt16Value { get; set; }
        public uint UInt32Value { get; set; }
        public ulong UInt64Value { get; set; }
        public double Float64Value { get; set; }
        public float Float32Value { get; set; }
        public bool[] BoolValue2 { get; set; }
        public byte[] Int8Value2 { get; set; }
        public short[] Int16Value2 { get; set; }
        public int[] Int32Value2 { get; set; }
        public long[] Int64Value2 { get; set; }
        public ushort[] UInt16Value2 { get; set; }
        public uint[] UInt32Value2 { get; set; }
        public ulong[] UInt64Value2 { get; set; }
        public double[] Float64Value2 { get; set; }
        public float[] Float32Value2 { get; set; }
        public bool[] BoolValue3 { get; set; }
        public byte[] Int8Value3 { get; set; }
        public short[] Int16Value3 { get; set; }
        public int[] Int32Value3 { get; set; }
        public long[] Int64Value3 { get; set; }
        public ushort[] UInt16Value3 { get; set; }
        public uint[] UInt32Value3 { get; set; }
        public ulong[] UInt64Value3 { get; set; }
        public double[] Float64Value3 { get; set; }
        public float[] Float32Value3 { get; set; }

        public MyStruct()
        {
        }

        public MyStruct(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(BoolValue);
            writer.Write(Int8Value);
            writer.Write(Int16Value);
            writer.Write(Int32Value);
            writer.Write(Int64Value);
            writer.Write(UInt16Value);
            writer.Write(UInt32Value);
            writer.Write(UInt64Value);
            writer.Write(Float64Value);
            writer.Write(Float32Value);
            writer.WriteVariableLengthArray(BoolValue2);
            writer.WriteVariableLengthArray(Int8Value2);
            writer.WriteVariableLengthArray(Int16Value2);
            writer.WriteVariableLengthArray(Int32Value2);
            writer.WriteVariableLengthArray(Int64Value2);
            writer.WriteVariableLengthArray(UInt16Value2);
            writer.WriteVariableLengthArray(UInt32Value2);
            writer.WriteVariableLengthArray(UInt64Value2);
            writer.WriteVariableLengthArray(Float64Value2);
            writer.WriteVariableLengthArray(Float32Value2);
            writer.WriteFixedLengthArray(BoolValue3.AsSpan<bool>(0, 10));
            writer.WriteFixedLengthArray(Int8Value3.AsSpan<byte>(0, 10));
            writer.WriteFixedLengthArray(Int16Value3.AsSpan<short>(0, 10));
            writer.WriteFixedLengthArray(Int32Value3.AsSpan<int>(0, 10));
            writer.WriteFixedLengthArray(Int64Value3.AsSpan<long>(0, 10));
            writer.WriteFixedLengthArray(UInt16Value3.AsSpan<ushort>(0, 10));
            writer.WriteFixedLengthArray(UInt32Value3.AsSpan<uint>(0, 10));
            writer.WriteFixedLengthArray(UInt64Value3.AsSpan<ulong>(0, 10));
            writer.WriteFixedLengthArray(Float64Value3.AsSpan<double>(0, 10));
            writer.WriteFixedLengthArray(Float32Value3.AsSpan<float>(0, 10));
        }

        public void ReadFrom(IXdrReader reader)
        {
            BoolValue = reader.ReadBool();
            Int8Value = reader.ReadByte();
            Int16Value = reader.ReadShort();
            Int32Value = reader.ReadInt();
            Int64Value = reader.ReadLong();
            UInt16Value = reader.ReadUShort();
            UInt32Value = reader.ReadUInt();
            UInt64Value = reader.ReadULong();
            Float64Value = reader.ReadDouble();
            Float32Value = reader.ReadFloat();
            BoolValue2 = reader.ReadBoolArray();
            Int8Value2 = reader.ReadByteArray();
            Int16Value2 = reader.ReadShortArray();
            Int32Value2 = reader.ReadIntArray();
            Int64Value2 = reader.ReadLongArray();
            UInt16Value2 = reader.ReadUShortArray();
            UInt32Value2 = reader.ReadUIntArray();
            UInt64Value2 = reader.ReadULongArray();
            Float64Value2 = reader.ReadDoubleArray();
            Float32Value2 = reader.ReadFloatArray();
            BoolValue3 = reader.ReadBoolArray(10);
            Int8Value3 = reader.ReadByteArray(10);
            Int16Value3 = reader.ReadShortArray(10);
            Int32Value3 = reader.ReadIntArray(10);
            Int64Value3 = reader.ReadLongArray(10);
            UInt16Value3 = reader.ReadUShortArray(10);
            UInt32Value3 = reader.ReadUIntArray(10);
            UInt64Value3 = reader.ReadULongArray(10);
            Float64Value3 = reader.ReadDoubleArray(10);
            Float32Value3 = reader.ReadFloatArray(10);
        }
    }

    internal class TestServiceClient : ClientStub
    {
        public TestServiceClient(Protocol protocol, IPAddress ipAddress, int port = 0) :
            base(protocol, ipAddress, port, TestServiceConstants.TestServiceProgram, TestServiceConstants.TestServiceVersion)
        {
        }

        public MyStruct TestMyStruct_1(MyStruct arg1)
        {
            var result = new MyStruct();
            Call(TestServiceConstants.TestMyStruct_1, TestServiceConstants.TestServiceVersion, arg1, result);
            return result;
        }
    }

    internal abstract class TestServiceServerStub : ServerStub
    {
        public TestServiceServerStub(IPAddress ipAddress, int port = 0) :
            base(ipAddress, port, TestServiceConstants.TestServiceProgram, new[] { TestServiceConstants.TestServiceVersion })
        {
        }

        protected override void DispatchReceivedCall(ReceivedCall call)
        {
            if (call.Version == TestServiceConstants.TestServiceVersion)
            {
                switch (call.Procedure)
                {
                    case TestServiceConstants.TestMyStruct_1:
                    {
                        var args = new MyStruct();
                        call.RetrieveCall(args);
                        var result = TestMyStruct_1(call.RemoteIpEndPoint, args);
                        call.Reply(result);
                        break;
                    }
                    default:
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else
            {
                call.ProgramMismatch();
            }
        }

        public abstract MyStruct TestMyStruct_1(IPEndPoint remoteIpEndPoint, MyStruct arg1);
    }
}
