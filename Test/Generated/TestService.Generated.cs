//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by RpcNetGen 1.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService
{
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Text;
    using RpcNet;

    internal static class TestServiceConstants
    {
        public const int Echo = 2;
        public const int SimpleStructSimpleStruct = 3;
        public const int TestServiceProgram = 0x20406080;
        public const int TestServiceVersion = 1;
        public const int TestServiceVersion2 = 2;
        public const int ThrowsException = 1;
    }

    internal enum SimpleEnum
    {
        Value1,
        Value2 = 1,
    }

    internal partial class ComplexStruct : IXdrDataType
    {
        public ComplexStruct()
        {
        }

        public ComplexStruct(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public bool BoolValue { get; set; }
        public sbyte Int8Value { get; set; }
        public short Int16Value { get; set; }
        public int Int32Value { get; set; }
        public long Int64Value { get; set; }
        public byte UInt8Value { get; set; }
        public ushort UInt16Value { get; set; }
        public uint UInt32Value { get; set; }
        public ulong UInt64Value { get; set; }
        public float Float32Value { get; set; }
        public double Float64Value { get; set; }
        public SimpleStruct SimpleStructValue { get; set; } = new SimpleStruct();
        public SimpleEnum SimpleEnumValue { get; set; }
        public List<byte> UInt8DynamicArray { get; set; } = new List<byte>();
        public List<SimpleStruct> SimpleStructDynamicArray { get; set; } = new List<SimpleStruct>();
        public List<SimpleEnum> SimpleEnumDynamicArray { get; set; } = new List<SimpleEnum>();
        public double[] Float64FixedArray { get; set; } = new double[10];
        public SimpleStruct[] SimpleStructFixedArray { get; set; } = new SimpleStruct[10];
        public SimpleEnum[] SimpleEnumFixedArray { get; set; } = new SimpleEnum[10];
        public StringType[] StringArray { get; set; } = new StringType[2];

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(BoolValue);
            writer.Write(Int8Value);
            writer.Write(Int16Value);
            writer.Write(Int32Value);
            writer.Write(Int64Value);
            writer.Write(UInt8Value);
            writer.Write(UInt16Value);
            writer.Write(UInt32Value);
            writer.Write(UInt64Value);
            writer.Write(Float32Value);
            writer.Write(Float64Value);
            SimpleStructValue.WriteTo(writer);
            writer.Write((int)SimpleEnumValue);
            if (UInt8DynamicArray is not null)
            {
                int _size = UInt8DynamicArray.Count;
                writer.Write(_size);
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    writer.Write(UInt8DynamicArray[_idx]);
                }
            }
            if (SimpleStructDynamicArray is not null)
            {
                int _size = SimpleStructDynamicArray.Count;
                writer.Write(_size);
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    SimpleStructDynamicArray[_idx].WriteTo(writer);
                }
            }
            if (SimpleEnumDynamicArray is not null)
            {
                int _size = SimpleEnumDynamicArray.Count;
                writer.Write(_size);
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    writer.Write((int)SimpleEnumDynamicArray[_idx]);
                }
            }
            {
                for (int _idx = 0; _idx < Float64FixedArray.Length; _idx++)
                {
                    writer.Write(Float64FixedArray[_idx]);
                }
            }
            {
                for (int _idx = 0; _idx < SimpleStructFixedArray.Length; _idx++)
                {
                    SimpleStructFixedArray[_idx].WriteTo(writer);
                }
            }
            {
                for (int _idx = 0; _idx < SimpleEnumFixedArray.Length; _idx++)
                {
                    writer.Write((int)SimpleEnumFixedArray[_idx]);
                }
            }
            {
                for (int _idx = 0; _idx < StringArray.Length; _idx++)
                {
                    StringArray[_idx].WriteTo(writer);
                }
            }
        }

        public void ReadFrom(IXdrReader reader)
        {
            BoolValue = reader.ReadBool();
            Int8Value = reader.ReadInt8();
            Int16Value = reader.ReadInt16();
            Int32Value = reader.ReadInt32();
            Int64Value = reader.ReadInt64();
            UInt8Value = reader.ReadUInt8();
            UInt16Value = reader.ReadUInt16();
            UInt32Value = reader.ReadUInt32();
            UInt64Value = reader.ReadUInt64();
            Float32Value = reader.ReadFloat32();
            Float64Value = reader.ReadFloat64();
            SimpleStructValue.ReadFrom(reader);
            SimpleEnumValue = (SimpleEnum)reader.ReadInt32();
            {
                int _size = reader.ReadInt32();
                UInt8DynamicArray.Clear();
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    UInt8DynamicArray.Add(reader.ReadUInt8());
                }
            }
            {
                int _size = reader.ReadInt32();
                SimpleStructDynamicArray.Clear();
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    SimpleStructDynamicArray.Add(new SimpleStruct(reader));
                }
            }
            {
                int _size = reader.ReadInt32();
                SimpleEnumDynamicArray.Clear();
                for (int _idx = 0; _idx < _size; _idx++)
                {
                    SimpleEnumDynamicArray.Add((SimpleEnum)reader.ReadInt32());
                }
            }
            {
                for (int _idx = 0; _idx < Float64FixedArray.Length; _idx++)
                {
                    Float64FixedArray[_idx] = reader.ReadFloat64();
                }
            }
            {
                for (int _idx = 0; _idx < SimpleStructFixedArray.Length; _idx++)
                {
                    SimpleStructFixedArray[_idx].ReadFrom(reader);
                }
            }
            {
                for (int _idx = 0; _idx < SimpleEnumFixedArray.Length; _idx++)
                {
                    SimpleEnumFixedArray[_idx] = (SimpleEnum)reader.ReadInt32();
                }
            }
            {
                for (int _idx = 0; _idx < StringArray.Length; _idx++)
                {
                    StringArray[_idx].ReadFrom(reader);
                }
            }
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" BoolValue = ");
            sb.Append(BoolValue);
            sb.Append(", Int8Value = ");
            sb.Append(Int8Value);
            sb.Append(", Int16Value = ");
            sb.Append(Int16Value);
            sb.Append(", Int32Value = ");
            sb.Append(Int32Value);
            sb.Append(", Int64Value = ");
            sb.Append(Int64Value);
            sb.Append(", UInt8Value = ");
            sb.Append(UInt8Value);
            sb.Append(", UInt16Value = ");
            sb.Append(UInt16Value);
            sb.Append(", UInt32Value = ");
            sb.Append(UInt32Value);
            sb.Append(", UInt64Value = ");
            sb.Append(UInt64Value);
            sb.Append(", Float32Value = ");
            sb.Append(Float32Value);
            sb.Append(", Float64Value = ");
            sb.Append(Float64Value);
            sb.Append(", SimpleStructValue = ");
            SimpleStructValue.ToString(sb);
            sb.Append(", SimpleEnumValue = ");
            sb.Append(SimpleEnumValue);
            sb.Append(", UInt8DynamicArray = [");
            for (int _idx = 0; _idx < UInt8DynamicArray.Count; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(UInt8DynamicArray[_idx]);
            }
            sb.Append(" ]");
            sb.Append(", SimpleStructDynamicArray = [");
            for (int _idx = 0; _idx < SimpleStructDynamicArray.Count; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                SimpleStructDynamicArray[_idx].ToString(sb);
            }
            sb.Append(" ]");
            sb.Append(", SimpleEnumDynamicArray = [");
            for (int _idx = 0; _idx < SimpleEnumDynamicArray.Count; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(SimpleEnumDynamicArray[_idx]);
            }
            sb.Append(" ]");
            sb.Append(", Float64FixedArray = [");
            for (int _idx = 0; _idx < Float64FixedArray.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(Float64FixedArray[_idx]);
            }
            sb.Append(" ]");
            sb.Append(", SimpleStructFixedArray = [");
            for (int _idx = 0; _idx < SimpleStructFixedArray.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                SimpleStructFixedArray[_idx].ToString(sb);
            }
            sb.Append(" ]");
            sb.Append(", SimpleEnumFixedArray = [");
            for (int _idx = 0; _idx < SimpleEnumFixedArray.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(SimpleEnumFixedArray[_idx]);
            }
            sb.Append(" ]");
            sb.Append(", StringArray = [");
            for (int _idx = 0; _idx < StringArray.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                StringArray[_idx].ToString(sb);
            }
            sb.Append(" ]");
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    internal partial class SimpleStruct : IXdrDataType
    {
        public SimpleStruct()
        {
        }

        public SimpleStruct(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public int Value { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Value);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Value = reader.ReadInt32();
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" Value = ");
            sb.Append(Value);
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    internal partial class StringType : IXdrDataType
    {
        public StringType()
        {
        }

        public StringType(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public string Value { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Value);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Value = reader.ReadString();
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" Value = ");
            sb.Append(Value);
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    internal class TestServiceClient : ClientStub
    {
        public TestServiceClient(Protocol protocol, IPAddress ipAddress, int port = 0, ClientSettings clientSettings = default) :
            base(protocol, ipAddress, port, TestServiceConstants.TestServiceProgram, TestServiceConstants.TestServiceVersion2, clientSettings)
        {
        }

        public void ThrowsException_1()
        {
            var args = Void;
            var result = Void;
            Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.ThrowsException, "ThrowsException", args);
            Call(TestServiceConstants.ThrowsException, TestServiceConstants.TestServiceVersion, args, result);
            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.ThrowsException, "ThrowsException", args, result);
        }

        private class Echo_1_Arguments : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        private class Echo_1_Result : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public int Echo_1(int value)
        {
            var args = new Echo_1_Arguments
            {
                Value = value,
            };
            var result = new Echo_1_Result();
            Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.Echo, "Echo", args);
            Call(TestServiceConstants.Echo, TestServiceConstants.TestServiceVersion, args, result);
            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.Echo, "Echo", args, result);
            return result.Value;
        }

        public SimpleStruct SimpleStructSimpleStruct_2(SimpleStruct value)
        {
            var result = new SimpleStruct();
            Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion2, TestServiceConstants.SimpleStructSimpleStruct, "SimpleStructSimpleStruct", value);
            Call(TestServiceConstants.SimpleStructSimpleStruct, TestServiceConstants.TestServiceVersion2, value, result);
            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion2, TestServiceConstants.SimpleStructSimpleStruct, "SimpleStructSimpleStruct", value, result);
            return result;
        }
    }

    internal abstract class TestServiceServerStub : ServerStub
    {
        public TestServiceServerStub(Protocol protocol, IPAddress ipAddress, int port = 0, ServerSettings serverSettings = default) :
            base(protocol, ipAddress, port, TestServiceConstants.TestServiceProgram, new[] { TestServiceConstants.TestServiceVersion, TestServiceConstants.TestServiceVersion2 }, serverSettings)
        {
        }

        private class Echo_1_Arguments : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        private class Echo_1_Result : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public abstract void ThrowsException_1(Caller caller);
        public abstract int Echo_1(Caller caller, int value);
        public abstract SimpleStruct SimpleStructSimpleStruct_2(Caller caller, SimpleStruct value);

        protected override void DispatchReceivedCall(ReceivedRpcCall call)
        {
            if (call.Version == TestServiceConstants.TestServiceVersion)
            {
                switch (call.Procedure)
                {
                    case TestServiceConstants.ThrowsException:
                    {
                        var args = Void;
                        call.RetrieveCall(args);
                        Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.ThrowsException, "ThrowsException", args);
                        var result = Void;
                        try
                        {
                            ThrowsException_1(call.Caller);
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.ThrowsException, "ThrowsException", args, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.ThrowsException, "ThrowsException", args, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case TestServiceConstants.Echo:
                    {
                        var args = new Echo_1_Arguments();
                        call.RetrieveCall(args);
                        Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.Echo, "Echo", args);
                        var result = new Echo_1_Result();
                        try
                        {
                            result.Value = Echo_1(call.Caller, args.Value);
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.Echo, "Echo", args, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion, TestServiceConstants.Echo, "Echo", args, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    default:
                        Settings?.Logger?.Error($"Procedure unavailable (Version: {call.Version}, Procedure: {call.Procedure}).");
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else if (call.Version == TestServiceConstants.TestServiceVersion2)
            {
                switch (call.Procedure)
                {
                    case TestServiceConstants.SimpleStructSimpleStruct:
                    {
                        var value = new SimpleStruct();
                        call.RetrieveCall(value);
                        Settings?.Logger?.BeginCall(TestServiceConstants.TestServiceVersion2, TestServiceConstants.SimpleStructSimpleStruct, "SimpleStructSimpleStruct", value);
                        try
                        {
                            SimpleStruct result = SimpleStructSimpleStruct_2(call.Caller, value);
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion2, TestServiceConstants.SimpleStructSimpleStruct, "SimpleStructSimpleStruct", value, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(TestServiceConstants.TestServiceVersion2, TestServiceConstants.SimpleStructSimpleStruct, "SimpleStructSimpleStruct", value, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    default:
                        Settings?.Logger?.Error($"Procedure unavailable (Version: {call.Version}, Procedure: {call.Procedure}).");
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else
            {
                Settings?.Logger?.Error($"Program mismatch (Version: {call.Version}).");
                call.ProgramMismatch();
            }
        }
    }
}
