//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by RpcNetGen 1.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService
{
    using System;
    using System.Net;
    using RpcNet;

    internal static class TestServiceConstants
    {
        public const int TestServiceVersion = 1;
        public const int Ping_1 = 1;
        public const int TestMyStruct_1 = 2;
        public const int TestServiceVersion2 = 2;
        public const int Ping2_2 = 1;
        public const int TestMyStruct2_2 = 2;
        public const int TestServiceProgram = 0x02004009;
    }

    internal partial class MyStruct : IXdrReadable, IXdrWritable
    {
        public bool BoolValue { get; set; }
        public byte Int8Value { get; set; }
        public short Int16Value { get; set; }
        public int Int32Value { get; set; }
        public long Int64Value { get; set; }
        public ushort UInt16Value { get; set; }
        public uint UInt32Value { get; set; }
        public ulong UInt64Value { get; set; }
        public double Float64Value { get; set; }
        public float Float32Value { get; set; }
        public bool[] BoolValue2 { get; set; }
        public byte[] Int8Value2 { get; set; }
        public short[] Int16Value2 { get; set; }
        public int[] Int32Value2 { get; set; }
        public long[] Int64Value2 { get; set; }
        public ushort[] UInt16Value2 { get; set; }
        public uint[] UInt32Value2 { get; set; }
        public ulong[] UInt64Value2 { get; set; }
        public double[] Float64Value2 { get; set; }
        public float[] Float32Value2 { get; set; }
        public bool[] BoolValue3 { get; } = new bool[10];
        public byte[] Int8Value3 { get; } = new byte[10];
        public short[] Int16Value3 { get; } = new short[10];
        public int[] Int32Value3 { get; } = new int[10];
        public long[] Int64Value3 { get; } = new long[10];
        public ushort[] UInt16Value3 { get; } = new ushort[10];
        public uint[] UInt32Value3 { get; } = new uint[10];
        public ulong[] UInt64Value3 { get; } = new ulong[10];
        public double[] Float64Value3 { get; } = new double[10];
        public float[] Float32Value3 { get; } = new float[10];

        public MyStruct()
        {
        }

        public MyStruct(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(BoolValue);
            writer.Write(Int8Value);
            writer.Write(Int16Value);
            writer.Write(Int32Value);
            writer.Write(Int64Value);
            writer.Write(UInt16Value);
            writer.Write(UInt32Value);
            writer.Write(UInt64Value);
            writer.Write(Float64Value);
            writer.Write(Float32Value);
            writer.WriteVariableLengthArray(BoolValue2);
            writer.WriteVariableLengthArray(Int8Value2);
            writer.WriteVariableLengthArray(Int16Value2);
            writer.WriteVariableLengthArray(Int32Value2);
            writer.WriteVariableLengthArray(Int64Value2);
            writer.WriteVariableLengthArray(UInt16Value2);
            writer.WriteVariableLengthArray(UInt32Value2);
            writer.WriteVariableLengthArray(UInt64Value2);
            writer.WriteVariableLengthArray(Float64Value2);
            writer.WriteVariableLengthArray(Float32Value2);
            writer.WriteFixedLengthArray(BoolValue3);
            writer.WriteFixedLengthArray(Int8Value3);
            writer.WriteFixedLengthArray(Int16Value3);
            writer.WriteFixedLengthArray(Int32Value3);
            writer.WriteFixedLengthArray(Int64Value3);
            writer.WriteFixedLengthArray(UInt16Value3);
            writer.WriteFixedLengthArray(UInt32Value3);
            writer.WriteFixedLengthArray(UInt64Value3);
            writer.WriteFixedLengthArray(Float64Value3);
            writer.WriteFixedLengthArray(Float32Value3);
        }

        public void ReadFrom(IXdrReader reader)
        {
            BoolValue = reader.ReadBool();
            Int8Value = reader.ReadByte();
            Int16Value = reader.ReadShort();
            Int32Value = reader.ReadInt();
            Int64Value = reader.ReadLong();
            UInt16Value = reader.ReadUShort();
            UInt32Value = reader.ReadUInt();
            UInt64Value = reader.ReadULong();
            Float64Value = reader.ReadDouble();
            Float32Value = reader.ReadFloat();
            BoolValue2 = reader.ReadBoolArray();
            Int8Value2 = reader.ReadByteArray();
            Int16Value2 = reader.ReadShortArray();
            Int32Value2 = reader.ReadIntArray();
            Int64Value2 = reader.ReadLongArray();
            UInt16Value2 = reader.ReadUShortArray();
            UInt32Value2 = reader.ReadUIntArray();
            UInt64Value2 = reader.ReadULongArray();
            Float64Value2 = reader.ReadDoubleArray();
            Float32Value2 = reader.ReadFloatArray();
            reader.ReadBoolArray(BoolValue3);
            reader.ReadByteArray(Int8Value3);
            reader.ReadShortArray(Int16Value3);
            reader.ReadIntArray(Int32Value3);
            reader.ReadLongArray(Int64Value3);
            reader.ReadUShortArray(UInt16Value3);
            reader.ReadUIntArray(UInt32Value3);
            reader.ReadULongArray(UInt64Value3);
            reader.ReadDoubleArray(Float64Value3);
            reader.ReadFloatArray(Float32Value3);
        }
    }

    internal partial class PingStruct : IXdrReadable, IXdrWritable
    {
        public int Value { get; set; }

        public PingStruct()
        {
        }

        public PingStruct(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Value);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Value = reader.ReadInt();
        }
    }

    internal class TestServiceClient : ClientStub
    {
        public TestServiceClient(Protocol protocol, IPAddress ipAddress, ClientSettings clientSettings = default) :
            base(protocol, ipAddress, TestServiceConstants.TestServiceProgram, TestServiceConstants.TestServiceVersion2, clientSettings)
        {
        }

        public PingStruct Ping_1(PingStruct arg1)
        {
            var result = new PingStruct();
            Call(TestServiceConstants.Ping_1, TestServiceConstants.TestServiceVersion, arg1, result);
            return result;
        }

        public MyStruct TestMyStruct_1(MyStruct arg1)
        {
            var result = new MyStruct();
            Call(TestServiceConstants.TestMyStruct_1, TestServiceConstants.TestServiceVersion, arg1, result);
            return result;
        }

        public PingStruct Ping2_2(PingStruct arg1)
        {
            var result = new PingStruct();
            Call(TestServiceConstants.Ping2_2, TestServiceConstants.TestServiceVersion2, arg1, result);
            return result;
        }

        public MyStruct TestMyStruct2_2(MyStruct arg1)
        {
            var result = new MyStruct();
            Call(TestServiceConstants.TestMyStruct2_2, TestServiceConstants.TestServiceVersion2, arg1, result);
            return result;
        }
    }

    internal abstract class TestServiceServerStub : ServerStub
    {
        public TestServiceServerStub(Protocol protocol, IPAddress ipAddress, ServerSettings serverSettings = default) :
            base(protocol, ipAddress, TestServiceConstants.TestServiceProgram, new[] { TestServiceConstants.TestServiceVersion, TestServiceConstants.TestServiceVersion2 }, serverSettings)
        {
        }

        protected override void DispatchReceivedCall(ReceivedRpcCall call)
        {
            if (call.Version == TestServiceConstants.TestServiceVersion)
            {
                switch (call.Procedure)
                {
                    case TestServiceConstants.Ping_1:
                    {
                        var args = new PingStruct();
                        call.RetrieveCall(args);
                        var result = Ping_1(call.Caller, args);
                        call.Reply(result);
                        break;
                    }
                    case TestServiceConstants.TestMyStruct_1:
                    {
                        var args = new MyStruct();
                        call.RetrieveCall(args);
                        var result = TestMyStruct_1(call.Caller, args);
                        call.Reply(result);
                        break;
                    }
                    default:
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else if (call.Version == TestServiceConstants.TestServiceVersion2)
            {
                switch (call.Procedure)
                {
                    case TestServiceConstants.Ping2_2:
                    {
                        var args = new PingStruct();
                        call.RetrieveCall(args);
                        var result = Ping2_2(call.Caller, args);
                        call.Reply(result);
                        break;
                    }
                    case TestServiceConstants.TestMyStruct2_2:
                    {
                        var args = new MyStruct();
                        call.RetrieveCall(args);
                        var result = TestMyStruct2_2(call.Caller, args);
                        call.Reply(result);
                        break;
                    }
                    default:
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else
            {
                call.ProgramMismatch();
            }
        }

        public abstract PingStruct Ping_1(Caller caller, PingStruct arg1);
        public abstract MyStruct TestMyStruct_1(Caller caller, MyStruct arg1);
        public abstract PingStruct Ping2_2(Caller caller, PingStruct arg1);
        public abstract MyStruct TestMyStruct2_2(Caller caller, MyStruct arg1);
    }
}
