//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by RpcNetGen 1.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RpcNet.PortMapper
{
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Text;
    using RpcNet;

    public static class PortMapperConstants
    {
        public const int Call = 5;
        public const int Dump = 4;
        public const int GetPort = 3;
        public const int Ping = 0;
        public const int PortMapperPort = 111;
        public const int PortMapperProgram = 100000;
        public const int PortMapperVersion = 2;
        public const int Set = 1;
        public const int Unset = 2;
    }

    public enum ProtocolKind
    {
        Unknown = 0,
        Tcp = 6,
        Udp = 17,
    }

    public partial class CallArguments : IXdrDataType
    {
        public CallArguments()
        {
        }

        public CallArguments(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public int Program { get; set; }
        public int Version { get; set; }
        public int Procedure { get; set; }
        public byte[] Arguments { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Program);
            writer.Write(Version);
            writer.Write(Procedure);
            writer.WriteOpaque(Arguments);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Program = reader.ReadInt32();
            Version = reader.ReadInt32();
            Procedure = reader.ReadInt32();
            Arguments = reader.ReadOpaque();
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" Program = ");
            sb.Append(Program);
            sb.Append(", Version = ");
            sb.Append(Version);
            sb.Append(", Procedure = ");
            sb.Append(Procedure);
            sb.Append(", Arguments = [");
            for (int _idx = 0; _idx < Arguments.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(Arguments[_idx]);
            }
            sb.Append(" ]");
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    public partial class CallResult : IXdrDataType
    {
        public CallResult()
        {
        }

        public CallResult(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public int Port { get; set; }
        public byte[] Result { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Port);
            writer.WriteOpaque(Result);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Port = reader.ReadInt32();
            Result = reader.ReadOpaque();
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" Port = ");
            sb.Append(Port);
            sb.Append(", Result = [");
            for (int _idx = 0; _idx < Result.Length; _idx++)
            {
                sb.Append(_idx == 0 ? " " : ", ");
                sb.Append(Result[_idx]);
            }
            sb.Append(" ]");
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    public partial class Mapping : IXdrDataType
    {
        public Mapping()
        {
        }

        public Mapping(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public int Program { get; set; }
        public int Version { get; set; }
        public ProtocolKind Protocol { get; set; }
        public int Port { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(Program);
            writer.Write(Version);
            writer.Write((int)Protocol);
            writer.Write(Port);
        }

        public void ReadFrom(IXdrReader reader)
        {
            Program = reader.ReadInt32();
            Version = reader.ReadInt32();
            Protocol = (ProtocolKind)reader.ReadInt32();
            Port = reader.ReadInt32();
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" Program = ");
            sb.Append(Program);
            sb.Append(", Version = ");
            sb.Append(Version);
            sb.Append(", Protocol = ");
            sb.Append(Protocol);
            sb.Append(", Port = ");
            sb.Append(Port);
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    public partial class MappingNode : IXdrDataType
    {
        public MappingNode()
        {
        }

        public MappingNode(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public Mapping Mapping { get; set; } = new Mapping();
        public MappingNode Next { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            var current = this;
            do
            {
                current.Mapping.WriteTo(writer);
                current = current.Next;
                writer.Write(current != null);
            } while (current != null);
        }

        public void ReadFrom(IXdrReader reader)
        {
            var current = this;
            MappingNode next;
            do
            {
                current.Mapping.ReadFrom(reader);
                next = reader.ReadBool() ? new MappingNode() : null;
                current.Next = next;
                current = next;
            } while (current != null);
        }

        public void ToString(StringBuilder sb)
        {
            var current = this;
            sb.Append("[");
            bool _first = true;
            do
            {
                if (_first)
                {
                    _first = false;
                }
                else
                {
                    sb.Append(",");
                }
                sb.Append(" Mapping = ");
                current.Mapping.ToString(sb);
                current = current.Next;
            } while (current != null);
            sb.Append(" ]");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    public partial class MappingNodeHead : IXdrDataType
    {
        public MappingNodeHead()
        {
        }

        public MappingNodeHead(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public MappingNode MappingNode { get; set; }

        public void WriteTo(IXdrWriter writer)
        {
            if (MappingNode != null)
            {
                writer.Write(true);
                MappingNode.WriteTo(writer);
            }
            else
            {
                writer.Write(false);
            }
        }

        public void ReadFrom(IXdrReader reader)
        {
            MappingNode = reader.ReadBool() ? new MappingNode(reader) : null;
        }

        public void ToString(StringBuilder sb)
        {
            sb.Append("{");
            sb.Append(" MappingNode = ");
            MappingNode?.ToString(sb);
            sb.Append(" }");
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            ToString(sb);
            return sb.ToString();
        }
    }

    public class PortMapperClient : ClientStub
    {
        public PortMapperClient(Protocol protocol, IPAddress ipAddress, int port = 0, ClientSettings clientSettings = default) :
            base(protocol, ipAddress, port, PortMapperConstants.PortMapperProgram, PortMapperConstants.PortMapperVersion, clientSettings)
        {
        }

        public void Ping_2()
        {
            var args = Void;
            var result = Void;
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Ping, "Ping", args);
            Call(PortMapperConstants.Ping, PortMapperConstants.PortMapperVersion, args, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Ping, "Ping", args, result);
        }

        private class Set_2_Result : IXdrDataType
        {
            public bool Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public bool Set_2(Mapping mapping)
        {
            var result = new Set_2_Result();
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Set, "Set", mapping);
            Call(PortMapperConstants.Set, PortMapperConstants.PortMapperVersion, mapping, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Set, "Set", mapping, result);
            return result.Value;
        }

        private class Unset_2_Result : IXdrDataType
        {
            public bool Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public bool Unset_2(Mapping mapping)
        {
            var result = new Unset_2_Result();
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Unset, "Unset", mapping);
            Call(PortMapperConstants.Unset, PortMapperConstants.PortMapperVersion, mapping, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Unset, "Unset", mapping, result);
            return result.Value;
        }

        private class GetPort_2_Result : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public int GetPort_2(Mapping mapping)
        {
            var result = new GetPort_2_Result();
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.GetPort, "GetPort", mapping);
            Call(PortMapperConstants.GetPort, PortMapperConstants.PortMapperVersion, mapping, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.GetPort, "GetPort", mapping, result);
            return result.Value;
        }

        public MappingNodeHead Dump_2()
        {
            var args = Void;
            var result = new MappingNodeHead();
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Dump, "Dump", args);
            Call(PortMapperConstants.Dump, PortMapperConstants.PortMapperVersion, args, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Dump, "Dump", args, result);
            return result;
        }

        public CallResult Call_2(CallArguments callArguments)
        {
            var result = new CallResult();
            Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Call, "Call", callArguments);
            Call(PortMapperConstants.Call, PortMapperConstants.PortMapperVersion, callArguments, result);
            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Call, "Call", callArguments, result);
            return result;
        }
    }

    public abstract class PortMapperServerStub : ServerStub
    {
        public PortMapperServerStub(Protocol protocol, IPAddress ipAddress, int port = 0, ServerSettings serverSettings = default) :
            base(protocol, ipAddress, port, PortMapperConstants.PortMapperProgram, new[] { PortMapperConstants.PortMapperVersion }, serverSettings)
        {
        }

        private class Set_2_Result : IXdrDataType
        {
            public bool Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        private class Unset_2_Result : IXdrDataType
        {
            public bool Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        private class GetPort_2_Result : IXdrDataType
        {
            public int Value { get; set; }

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadInt32();
            }

            public void ToString(StringBuilder sb)
            {
                sb.Append("{");
                sb.Append(" Value = ");
                sb.Append(Value);
                sb.Append(" }");
            }

            public override string ToString()
            {
                var sb = new StringBuilder();
                ToString(sb);
                return sb.ToString();
            }
        }

        public abstract void Ping_2(Caller caller);
        public abstract bool Set_2(Caller caller, Mapping mapping);
        public abstract bool Unset_2(Caller caller, Mapping mapping);
        public abstract int GetPort_2(Caller caller, Mapping mapping);
        public abstract MappingNodeHead Dump_2(Caller caller);
        public abstract CallResult Call_2(Caller caller, CallArguments callArguments);

        protected override void DispatchReceivedCall(ReceivedRpcCall call)
        {
            if (call.Version == PortMapperConstants.PortMapperVersion)
            {
                switch (call.Procedure)
                {
                    case PortMapperConstants.Ping:
                    {
                        var args = Void;
                        call.RetrieveCall(args);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Ping, "Ping", args);
                        var result = Void;
                        try
                        {
                            Ping_2(call.Caller);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Ping, "Ping", args, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Ping, "Ping", args, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case PortMapperConstants.Set:
                    {
                        var mapping = new Mapping();
                        call.RetrieveCall(mapping);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Set, "Set", mapping);
                        var result = new Set_2_Result();
                        try
                        {
                            result.Value = Set_2(call.Caller, mapping);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Set, "Set", mapping, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Set, "Set", mapping, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case PortMapperConstants.Unset:
                    {
                        var mapping = new Mapping();
                        call.RetrieveCall(mapping);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Unset, "Unset", mapping);
                        var result = new Unset_2_Result();
                        try
                        {
                            result.Value = Unset_2(call.Caller, mapping);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Unset, "Unset", mapping, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Unset, "Unset", mapping, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case PortMapperConstants.GetPort:
                    {
                        var mapping = new Mapping();
                        call.RetrieveCall(mapping);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.GetPort, "GetPort", mapping);
                        var result = new GetPort_2_Result();
                        try
                        {
                            result.Value = GetPort_2(call.Caller, mapping);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.GetPort, "GetPort", mapping, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.GetPort, "GetPort", mapping, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case PortMapperConstants.Dump:
                    {
                        var args = Void;
                        call.RetrieveCall(args);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Dump, "Dump", args);
                        try
                        {
                            MappingNodeHead result = Dump_2(call.Caller);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Dump, "Dump", args, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Dump, "Dump", args, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    case PortMapperConstants.Call:
                    {
                        var callArguments = new CallArguments();
                        call.RetrieveCall(callArguments);
                        Settings?.Logger?.BeginCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Call, "Call", callArguments);
                        try
                        {
                            CallResult result = Call_2(call.Caller, callArguments);
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Call, "Call", callArguments, result);
                            call.Reply(result);
                        }
                        catch (Exception exception) when (!(exception is RpcException))
                        {
                            Settings?.Logger?.EndCall(PortMapperConstants.PortMapperVersion, PortMapperConstants.Call, "Call", callArguments, exception);
                            call.SystemError();
                            return;
                        }
                        break;
                    }
                    default:
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else
            {
                call.ProgramMismatch();
            }
        }
    }
}
