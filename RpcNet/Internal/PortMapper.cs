//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by RpcNetGen 1.0.0.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RpcNet.Internal
{
    using System;
    using System.Net;
    using RpcNet;

    internal static class PortMapperConstants
    {
        public const int PMAP_PORT = 111;
        public const int IPPROTO_TCP = 6;
        public const int IPPROTO_UDP = 17;
        public const int PMAP_VERS = 2;
        public const int PMAPPROC_NULL_2 = 0;
        public const int PMAPPROC_SET_2 = 1;
        public const int PMAPPROC_UNSET_2 = 2;
        public const int PMAPPROC_GETPORT_2 = 3;
        public const int PMAPPROC_DUMP_2 = 4;
        public const int PMAPPROC_CALLIT_2 = 5;
        public const int PMAP_PROG = 100000;
    }

    internal partial class call_args : IXdrReadable, IXdrWritable
    {
        public uint prog { get; set; }
        public uint vers { get; set; }
        public uint proc { get; set; }
        public byte[] args { get; set; }

        public call_args()
        {
        }

        public call_args(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(prog);
            writer.Write(vers);
            writer.Write(proc);
            writer.WriteVariableLengthOpaque(args);
        }

        public void ReadFrom(IXdrReader reader)
        {
            prog = reader.ReadUInt();
            vers = reader.ReadUInt();
            proc = reader.ReadUInt();
            args = reader.ReadOpaque();
        }
    }

    internal partial class call_result : IXdrReadable, IXdrWritable
    {
        public uint port { get; set; }
        public byte[] res { get; set; }

        public call_result()
        {
        }

        public call_result(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(port);
            writer.WriteVariableLengthOpaque(res);
        }

        public void ReadFrom(IXdrReader reader)
        {
            port = reader.ReadUInt();
            res = reader.ReadOpaque();
        }
    }

    internal partial class mapping : IXdrReadable, IXdrWritable
    {
        public uint prog { get; set; }
        public uint vers { get; set; }
        public uint prot { get; set; }
        public uint port { get; set; }

        public mapping()
        {
        }

        public mapping(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            writer.Write(prog);
            writer.Write(vers);
            writer.Write(prot);
            writer.Write(port);
        }

        public void ReadFrom(IXdrReader reader)
        {
            prog = reader.ReadUInt();
            vers = reader.ReadUInt();
            prot = reader.ReadUInt();
            port = reader.ReadUInt();
        }
    }

    internal partial class pmaplist : IXdrReadable, IXdrWritable
    {
        public mapping map { get; set; }
        public pmaplist next { get; set; }

        public pmaplist()
        {
        }

        public pmaplist(IXdrReader reader)
        {
            ReadFrom(reader);
        }

        public void WriteTo(IXdrWriter writer)
        {
            var current = this;
            do
            {
                current.map?.WriteTo(writer);
                current = current.next;
                writer.Write(current != null);
            } while (current != null);
        }

        public void ReadFrom(IXdrReader reader)
        {
            var current = this;
            pmaplist next;
            do
            {
                current.map = new mapping(reader);
                next = reader.ReadBool() ? new pmaplist() : null;
                current.next = next;
                current = next;
            } while (current != null);
        }
    }

    internal class PortMapperClient : ClientStub
    {
        public PortMapperClient(IPAddress ipAddress) :
            base(ipAddress, 0, PortMapperConstants.PMAP_PROG, PortMapperConstants.PMAP_VERS)
        {
        }

        public PortMapperClient(IPAddress ipAddress, int port) :
            base(ipAddress, port, PortMapperConstants.PMAP_PROG, PortMapperConstants.PMAP_VERS)
        {
        }

        public PortMapperClient(IPAddress ipAddress, int program, int version) :
            base(ipAddress, 0, program, version)
        {
        }

        public PortMapperClient(IPAddress ipAddress, int port, int program, int version) :
            base(ipAddress, port, program, version)
        {
        }

        private class Arguments_0 : IXdrWritable
        {
            public void WriteTo(IXdrWriter writer)
            {
            }
        }

        private class Result_0 : IXdrReadable
        {
            public void ReadFrom(IXdrReader reader)
            {
            }
        }

        public void PMAPPROC_NULL_2()
        {
            var args = new Arguments_0();
            var result = new Result_0();
            Call(PortMapperConstants.PMAPPROC_NULL_2, PortMapperConstants.PMAP_VERS, args, result);
        }

        private class Result_1 : IXdrReadable
        {
            public bool Value;

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }
        }

        public bool PMAPPROC_SET_2(mapping arg1)
        {
            var result = new Result_1();
            Call(PortMapperConstants.PMAPPROC_SET_2, PortMapperConstants.PMAP_VERS, arg1, result);
            return result.Value;
        }

        private class Result_2 : IXdrReadable
        {
            public bool Value;

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadBool();
            }
        }

        public bool PMAPPROC_UNSET_2(mapping arg1)
        {
            var result = new Result_2();
            Call(PortMapperConstants.PMAPPROC_UNSET_2, PortMapperConstants.PMAP_VERS, arg1, result);
            return result.Value;
        }

        private class Result_3 : IXdrReadable
        {
            public uint Value;

            public void ReadFrom(IXdrReader reader)
            {
                Value = reader.ReadUInt();
            }
        }

        public uint PMAPPROC_GETPORT_2(mapping arg1)
        {
            var result = new Result_3();
            Call(PortMapperConstants.PMAPPROC_GETPORT_2, PortMapperConstants.PMAP_VERS, arg1, result);
            return result.Value;
        }

        private class Arguments_4 : IXdrWritable
        {
            public void WriteTo(IXdrWriter writer)
            {
            }
        }

        public pmaplist PMAPPROC_DUMP_2()
        {
            var args = new Arguments_4();
            var result = new pmaplist();
            Call(PortMapperConstants.PMAPPROC_DUMP_2, PortMapperConstants.PMAP_VERS, args, result);
            return result;
        }

        public call_result PMAPPROC_CALLIT_2(call_args arg1)
        {
            var result = new call_result();
            Call(PortMapperConstants.PMAPPROC_CALLIT_2, PortMapperConstants.PMAP_VERS, arg1, result);
            return result;
        }
    }

    internal abstract class PortMapperServerStub : ServerStub
    {
        public PortMapperServerStub() : this(0)
        {
        }

        public PortMapperServerStub(int port) : this(IPAddress.Any, port)
        {
        }

        public PortMapperServerStub(IPAddress ipAddress, int port) :
            base(ipAddress, port, PortMapperConstants.PMAP_PROG, new[] { PortMapperConstants.PMAP_VERS })
        {
        }

        private class Arguments_0 : IXdrReadable
        {
            public void ReadFrom(IXdrReader reader)
            {
            }
        }

        private class Result_0 : IXdrWritable
        {
            public void WriteTo(IXdrWriter writer)
            {
            }
        }

        private class Result_1 : IXdrWritable
        {
            public bool Value;

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }
        }

        private class Result_2 : IXdrWritable
        {
            public bool Value;

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }
        }

        private class Result_3 : IXdrWritable
        {
            public uint Value;

            public void WriteTo(IXdrWriter writer)
            {
                writer.Write(Value);
            }
        }

        private class Arguments_4 : IXdrReadable
        {
            public void ReadFrom(IXdrReader reader)
            {
            }
        }

        protected override void DispatchReceivedCall(ReceivedCall call)
        {
            if (call.Version == PortMapperConstants.PMAP_VERS)
            {
                switch (call.Procedure)
                {
                    case PortMapperConstants.PMAPPROC_NULL_2:
                    {
                        var args = new Arguments_0();
                        call.RetrieveCall(args);
                        PMAPPROC_NULL_2(call.RemoteIpEndPoint);
                        call.Reply(new Result_0());
                        break;
                    }
                    case PortMapperConstants.PMAPPROC_SET_2:
                    {
                        var args = new mapping();
                        call.RetrieveCall(args);
                        var result = new Result_1();
                        result.Value = PMAPPROC_SET_2(call.RemoteIpEndPoint, args);
                        call.Reply(result);
                        break;
                    }
                    case PortMapperConstants.PMAPPROC_UNSET_2:
                    {
                        var args = new mapping();
                        call.RetrieveCall(args);
                        var result = new Result_2();
                        result.Value = PMAPPROC_UNSET_2(call.RemoteIpEndPoint, args);
                        call.Reply(result);
                        break;
                    }
                    case PortMapperConstants.PMAPPROC_GETPORT_2:
                    {
                        var args = new mapping();
                        call.RetrieveCall(args);
                        var result = new Result_3();
                        result.Value = PMAPPROC_GETPORT_2(call.RemoteIpEndPoint, args);
                        call.Reply(result);
                        break;
                    }
                    case PortMapperConstants.PMAPPROC_DUMP_2:
                    {
                        var args = new Arguments_4();
                        call.RetrieveCall(args);
                        var result = PMAPPROC_DUMP_2(call.RemoteIpEndPoint);
                        call.Reply(result);
                        break;
                    }
                    case PortMapperConstants.PMAPPROC_CALLIT_2:
                    {
                        var args = new call_args();
                        call.RetrieveCall(args);
                        var result = PMAPPROC_CALLIT_2(call.RemoteIpEndPoint, args);
                        call.Reply(result);
                        break;
                    }
                    default:
                        call.ProcedureUnavailable();
                        break;
                }
            }
            else
            {
                call.ProgramMismatch();
            }
        }

        public abstract void PMAPPROC_NULL_2(IPEndPoint remoteIpEndPoint);
        public abstract bool PMAPPROC_SET_2(IPEndPoint remoteIpEndPoint, mapping arg1);
        public abstract bool PMAPPROC_UNSET_2(IPEndPoint remoteIpEndPoint, mapping arg1);
        public abstract uint PMAPPROC_GETPORT_2(IPEndPoint remoteIpEndPoint, mapping arg1);
        public abstract pmaplist PMAPPROC_DUMP_2(IPEndPoint remoteIpEndPoint);
        public abstract call_result PMAPPROC_CALLIT_2(IPEndPoint remoteIpEndPoint, call_args arg1);
    }
}
